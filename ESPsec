-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Teams = game:GetService("Teams")

-- Validate critical objects
local LocalPlayer = Players.LocalPlayer
if not LocalPlayer then
    warn("LocalPlayer not found.")
    _G.CROW:SendNotification("ESP Error: LocalPlayer not found.", 5)
    return
end

local Camera = workspace.CurrentCamera
if not Camera then
    warn("Camera not found.")
    _G.CROW:SendNotification("ESP Error: Camera not found.", 5)
    return
end

-- Validate ESPTab
if not _G.ESPTab then
    warn("ESPTab not found. Ensure CROW UI is properly initialized.")
    _G.CROW:SendNotification("ESP Error: ESPTab not found.", 5)
    return
end

-- Validate AddSection method
if not _G.ESPTab.AddSection or typeof(_G.ESPTab.AddSection) ~= "function" then
    warn("ESPTab:AddSection is not a valid method.")
    _G.CROW:SendNotification("ESP Error: ESPTab:AddSection is not valid.", 5)
    return
end

-- Create ESP sections
local SecESP = _G.ESPTab:AddSection("ESP", 1)
if not SecESP then
    warn("Failed to create ESP section.")
    _G.CROW:SendNotification("ESP Error: Failed to create ESP section.", 5)
    return
end

local SecCustomESP = _G.ESPTab:AddSection("Customise ESP", 2)
if not SecCustomESP then
    warn("Failed to create Customise ESP section.")
    _G.CROW:SendNotification("ESP Error: Failed to create Customise ESP section.", 5)
    return
end

-- Validate AddToggle method
if not SecESP.AddToggle or typeof(SecESP.AddToggle) ~= "function" then
    warn("SecESP:AddToggle is not a valid method.")
    _G.CROW:SendNotification("ESP Error: SecESP:AddToggle is not valid.", 5)
    return
end

-- Store references to all UI elements and ESP objects
local ESPObjects = {}

-- Store current settings values with defaults
local ESPSettings = {
    BoxThickness = 2,
    TextSize = 15,
    AllyColor = Color3.fromRGB(96, 205, 255),
    EnemyColor = Color3.fromRGB(255, 70, 70),
    SkeletonColor = Color3.fromRGB(255, 255, 255),
    TracerColor = Color3.fromRGB(255, 255, 255),
    HealthBarWidth = 4,
    HealthBarOffset = 2,
    ESPScale = 1,
    SkeletonThickness = 1,
    TracerThickness = 1,
    NameTextOffset = 16,
    DistanceTextOffset = 2,
    VisibilityTextOffset = 2
}

-- Track health bar animation states
local HealthBarStates = {}

-- Setup Main ESP section
SecESP:AddSeparator({
    enabled = true,
    text = "Main"
})

-- Main ESP Toggle
local ShowESP = SecESP:AddToggle({
    text = "Enable ESP",
    state = false,
    tooltip = "Master switch for ESP features",
    flag = "ShowESP"
})

ShowESP:AddBind({
    enabled = true,
    text = "Toggle ESP",
    tooltip = "Hotkey to toggle ESP",
    mode = "toggle",
    bind = "NONE",
    flag = "ESPToggleKey",
    callback = function(state)
        ShowESP.state = state
    end
})

-- ESP Features Toggles
local ESPBox = SecESP:AddToggle({
    text = "Show Box",
    state = false,
    tooltip = "Show box around players",
    flag = "ESPBox"
})

local ShowHealthBar = SecESP:AddToggle({
    text = "Show Health Bar",
    state = false,
    tooltip = "Show health bar next to players",
    flag = "ShowHealthBar"
})

local ShowDistance = SecESP:AddToggle({
    text = "Show Distance",
    state = false,
    tooltip = "Show distance to players",
    flag = "ShowDistance"
})

local ShowNames = SecESP:AddToggle({
    text = "Show Names",
    state = false,
    tooltip = "Show player names",
    flag = "ShowNames"
})

local ShowVisibility = SecESP:AddToggle({
    text = "Show Visibility",
    state = false,
    tooltip = "Show if players are visible",
    flag = "ShowVisibility"
})

local ShowSkeleton = SecESP:AddToggle({
    text = "Show Skeleton",
    state = false,
    tooltip = "Show player skeleton",
    flag = "ShowSkeleton"
})

local ShowTracers = SecESP:AddToggle({
    text = "Show Tracers",
    state = false,
    tooltip = "Show lines to players",
    flag = "ShowTracers"
})

-- Store all ESP toggles in a table
local ESPToggles = {
    Distance = ShowDistance,
    Names = ShowNames,
    Visibility = ShowVisibility,
    Skeleton = ShowSkeleton,
    Tracers = ShowTracers
}

SecESP:AddSeparator({
    enabled = true,
    text = "Team Settings"
})

-- Team ESP Settings stored in table
local TeamSettings = {
    TeamCheck = SecESP:AddToggle({
        text = "Only Show Enemies",
        state = false,
        tooltip = "Only show ESP for enemy players",
        flag = "ESPTeamCheck"
    }),
    TeamColor = SecESP:AddToggle({
        text = "Use Team Colors",
        state = false,
        tooltip = "Use team colors for ESP",
        flag = "ESPTeamColor"
    })
}

-- Function to get all teams in the game
local function GetTeamNames()
    local TeamNames = {}
    for _, team in ipairs(Teams:GetTeams()) do
        if team.Name and team.Name ~= "Neutral" then
            table.insert(TeamNames, team.Name)
        end
    end
    return TeamNames
end

SecCustomESP:AddSeparator({
    enabled = true,
    text = "Colors"
})

-- Team color settings
local AllyColor = SecCustomESP:AddColor({
    enabled = true,
    text = "Ally Color",
    tooltip = "Set the color for teammates",
    color = ESPSettings.AllyColor,
    flag = "AllyColor",
    trans = 0,
    open = false,
    callback = function(color)
        ESPSettings.AllyColor = color or ESPSettings.AllyColor
    end
})

local EnemyColor = SecCustomESP:AddColor({
    enabled = true,
    text = "Enemy Color",
    tooltip = "Set the color for enemies",
    color = ESPSettings.EnemyColor,
    flag = "EnemyColor",
    trans = 0,
    open = false,
    callback = function(color)
        ESPSettings.EnemyColor = color or ESPSettings.EnemyColor
    end
})

local SkeletonColor = SecCustomESP:AddColor({
    enabled = true,
    text = "Skeleton Color",
    tooltip = "Set the color for skeleton lines",
    color = ESPSettings.SkeletonColor,
    flag = "SkeletonColor",
    trans = 0,
    open = false,
    callback = function(color)
        ESPSettings.SkeletonColor = color or ESPSettings.SkeletonColor
    end
})

local TracerColor = SecCustomESP:AddColor({
    enabled = true,
    text = "Tracer Color",
    tooltip = "Set the color for tracer lines",
    color = ESPSettings.TracerColor,
    flag = "TracerColor",
    trans = 0,
    open = false,
    callback = function(color)
        ESPSettings.TracerColor = color or ESPSettings.TracerColor
    end
})

SecCustomESP:AddSeparator({
    enabled = true,
    text = "Size Settings"
})

-- Box Thickness Slider
local BoxThickness = SecCustomESP:AddSlider({
    text = "Box Thickness",
    min = 1,
    max = 5,
    default = 2,
    increment = 1,
    suffix = "px",
    tooltip = "Adjust the thickness of ESP boxes",
    flag = "BoxThickness",
    callback = function(value)
        ESPSettings.BoxThickness = value or 2
        UpdateAllESPSettings()
    end
})

-- Text Size Slider
local TextSize = SecCustomESP:AddSlider({
    text = "Text Size",
    min = 10,
    max = 24,
    default = 15,
    increment = 1,
    suffix = "pt",
    tooltip = "Adjust the size of ESP text",
    flag = "TextSize",
    callback = function(value)
        ESPSettings.TextSize = value or 15
        UpdateAllESPSettings()
    end
})

-- Health Bar Width Slider
local HealthBarWidth = SecCustomESP:AddSlider({
    text = "Health Bar Width",
    min = 2,
    max = 8,
    default = 4,
    increment = 1,
    suffix = "px",
    tooltip = "Adjust the width of health bars",
    flag = "HealthBarWidth",
    callback = function(value)
        ESPSettings.HealthBarWidth = value or 4
        UpdateAllESPSettings()
    end
})

-- Health Bar Offset Slider
local HealthBarOffset = SecCustomESP:AddSlider({
    text = "Health Bar Offset",
    min = 0,
    max = 10,
    default = 2,
    increment = 1,
    suffix = "px",
    tooltip = "Adjust the distance of health bar from box",
    flag = "HealthBarOffset",
    callback = function(value)
        ESPSettings.HealthBarOffset = value or 2
        UpdateAllESPSettings()
    end
})

-- Skeleton Thickness Slider
local SkeletonThickness = SecCustomESP:AddSlider({
    text = "Skeleton Thickness",
    min = 1,
    max = 4,
    default = 1,
    increment = 1,
    suffix = "px",
    tooltip = "Adjust the thickness of skeleton lines",
    flag = "SkeletonThickness",
    callback = function(value)
        ESPSettings.SkeletonThickness = value or 1
        UpdateAllESPSettings()
    end
})

-- Tracer Thickness Slider
local TracerThickness = SecCustomESP:AddSlider({
    text = "Tracer Thickness",
    min = 1,
    max = 4,
    default = 1,
    increment = 1,
    suffix = "px",
    tooltip = "Adjust the thickness of tracer lines",
    flag = "TracerThickness",
    callback = function(value)
        ESPSettings.TracerThickness = value or 1
        UpdateAllESPSettings()
    end
})

-- Name Text Offset Slider
local NameTextOffset = SecCustomESP:AddSlider({
    text = "Name Text Offset",
    min = 0,
    max = 30,
    default = 16,
    increment = 1,
    suffix = "px",
    tooltip = "Adjust the distance of name text above box",
    flag = "NameTextOffset",
    callback = function(value)
        ESPSettings.NameTextOffset = value or 16
        UpdateAllESPSettings()
    end
})

-- Distance Text Offset Slider
local DistanceTextOffset = SecCustomESP:AddSlider({
    text = "Distance Text Offset",
    min = 0,
    max = 20,
    default = 2,
    increment = 1,
    suffix = "px",
    tooltip = "Adjust the distance of distance text below box",
    flag = "DistanceTextOffset",
    callback = function(value)
        ESPSettings.DistanceTextOffset = value or 2
        UpdateAllESPSettings()
    end
})

-- Visibility Text Offset Slider
local VisibilityTextOffset = SecCustomESP:AddSlider({
    text = "Visibility Text Offset",
    min = 0,
    max = 20,
    default = 2,
    increment = 1,
    suffix = "px",
    tooltip = "Adjust the distance of visibility text below box",
    flag = "VisibilityTextOffset",
    callback = function(value)
        ESPSettings.VisibilityTextOffset = value or 2
        UpdateAllESPSettings()
    end
})

-- ESP Scale Slider
local ESPScale = SecCustomESP:AddSlider({
    text = "ESP Scale",
    min = 50,
    max = 150,
    default = 100,
    increment = 10,
    suffix = "%",
    tooltip = "Adjust the overall scale of ESP elements",
    flag = "ESPScale",
    callback = function(value)
        ESPSettings.ESPScale = (value or 100) / 100
        UpdateAllESPSettings()
    end
})

-- Create ESP for a player
local function CreateESP(player)
    if player == LocalPlayer or ESPObjects[player] or not player:IsA("Player") then
        return
    end
    
    local success, Data = pcall(function()
        return {
            Box = Drawing.new("Square"),
            Distance = Drawing.new("Text"),
            HealthOutline = Drawing.new("Square"),
            HealthBar = Drawing.new("Square"),
            Name = Drawing.new("Text"),
            Visibility = Drawing.new("Text"),
            Tracer = Drawing.new("Line"),
            Skeleton = {
                HeadTorso = Drawing.new("Line"),
                TorsoLeftArm = Drawing.new("Line"),
                TorsoRightArm = Drawing.new("Line"),
                TorsoLeftLeg = Drawing.new("Line"),
                TorsoRightLeg = Drawing.new("Line")
            }
        }
    end)
    
    if not success then
        warn("Failed to create ESP objects for player: " .. tostring(player))
        _G.CROW:SendNotification("ESP Error: Failed to create ESP objects for " .. tostring(player), 5)
        return
    end
    
    -- Initialize ESP box
    Data.Box.Thickness = ESPSettings.BoxThickness
    Data.Box.Filled = false
    Data.Box.Visible = false
    
    -- Initialize distance text
    Data.Distance.Size = ESPSettings.TextSize
    Data.Distance.Center = true
    Data.Distance.Outline = true
    Data.Distance.OutlineColor = Color3.new(0, 0, 0)
    Data.Distance.Font = Drawing.Fonts.UI
    Data.Distance.Visible = false
    
    -- Initialize health bar
    Data.HealthOutline.Thickness = 1
    Data.HealthOutline.Filled = true
    Data.HealthOutline.Color = Color3.new(0, 0, 0)
    Data.HealthOutline.Visible = false
    
    Data.HealthBar.Thickness = 1
    Data.HealthBar.Filled = true
    Data.HealthBar.Color = Color3.new(0, 1, 0)
    Data.HealthBar.Visible = false
    
    -- Initialize name
    Data.Name.Size = ESPSettings.TextSize
    Data.Name.Center = true
    Data.Name.Outline = true
    Data.Name.OutlineColor = Color3.new(0, 0, 0)
    Data.Name.Font = Drawing.Fonts.UI
    Data.Name.Visible = false
    
    -- Initialize visibility text
    Data.Visibility.Size = ESPSettings.TextSize
    Data.Visibility.Center = true
    Data.Visibility.Outline = true
    Data.Visibility.OutlineColor = Color3.new(0, 0, 0)
    Data.Visibility.Font = Drawing.Fonts.UI
    Data.Visibility.Visible = false
    
    -- Initialize tracer
    Data.Tracer.Thickness = ESPSettings.TracerThickness
    Data.Tracer.Visible = false
    
    -- Initialize skeleton
    for _, line in pairs(Data.Skeleton) do
        line.Thickness = ESPSettings.SkeletonThickness
        line.Visible = false
    end
    
    ESPObjects[player] = Data
    HealthBarStates[player] = { CurrentHeight = 0 }
end

-- Remove ESP for a player
local function RemoveESP(player)
    local Data = ESPObjects[player]
    if not Data then
        return
    end
    
    for _, obj in pairs(Data) do
        if type(obj) == "table" then
            for _, line in pairs(obj) do
                if line and line.Remove then
                    line:Remove()
                end
            end
        elseif obj and obj.Remove then
            obj:Remove()
        end
    end
    ESPObjects[player] = nil
    HealthBarStates[player] = nil
end

-- Check if player is visible
local function IsPlayerVisible(character)
    if not LocalPlayer.Character or not character then
        return false
    end
    
    local LocalHead = LocalPlayer.Character:FindFirstChild("Head")
    local TargetHead = character:FindFirstChild("Head")
    
    if not LocalHead or not TargetHead then
        return false
    end
    
    local Ray = Ray.new(LocalHead.Position, (TargetHead.Position - LocalHead.Position).Unit * 1000)
    local IgnoreList = {LocalPlayer.Character}
    local HitPart = workspace:FindPartOnRayWithIgnoreList(Ray, IgnoreList)
    
    return HitPart and HitPart:IsDescendantOf(character)
end

-- Update all ESP settings
function UpdateAllESPSettings()
    for _, data in pairs(ESPObjects) do
        if data.Box then
            data.Box.Thickness = ESPSettings.BoxThickness
        end
        if data.Distance then
            data.Distance.Size = ESPSettings.TextSize
        end
        if data.Name then
            data.Name.Size = ESPSettings.TextSize
        end
        if data.Visibility then
            data.Visibility.Size = ESPSettings.TextSize
        end
        if data.Tracer then
            data.Tracer.Thickness = ESPSettings.TracerThickness
        end
        for _, line in pairs(data.Skeleton or {}) do
            line.Thickness = ESPSettings.SkeletonThickness
        end
    end
end

-- Create ESP for existing players
for _, player in ipairs(Players:GetPlayers()) do
    CreateESP(player)
end

-- Handle player joining and leaving
Players.PlayerAdded:Connect(CreateESP)
Players.PlayerRemoving:Connect(RemoveESP)

-- ESP rendering logic with visibility check throttling
local LastVisibilityCheck = 0
local VisibilityCheckInterval = 0.5 -- Check visibility every 0.5 seconds

RunService.RenderStepped:Connect(function(delta)
    if not ShowESP.state then
        for _, data in pairs(ESPObjects) do
            for _, obj in pairs(data) do
                if type(obj) == "table" then
                    for _, line in pairs(obj) do
                        if line and line.Visible ~= nil then
                            line.Visible = false
                        end
                    end
                elseif obj and obj.Visible ~= nil then
                    obj.Visible = false
                end
            end
        end
        return
    end

    local CurrentTime = tick()
    local ShouldCheckVisibility = CurrentTime - LastVisibilityCheck >= VisibilityCheckInterval

    for player, data in pairs(ESPObjects) do
        local Character = player.Character
        local HRP = Character and Character:FindFirstChild("HumanoidRootPart")
        local Humanoid = Character and Character:FindFirstChild("Humanoid")

        if not (player:IsA("Player") and Character and HRP and Humanoid and Humanoid.Health > 0) then
            for _, obj in pairs(data) do
                if type(obj) == "table" then
                    for _, line in pairs(obj) do
                        if line and line.Visible ~= nil then
                            line.Visible = false
                        end
                    end
                elseif obj and obj.Visible ~= nil then
                    obj.Visible = false
                end
            end
            continue
        end
        
        if TeamSettings.TeamCheck.state and player.Team == LocalPlayer.Team and LocalPlayer.Team then
            for _, obj in pairs(data) do
                if type(obj) == "table" then
                    for _, line in pairs(obj) do
                        if line and line.Visible ~= nil then
                            line.Visible = false
                        end
                    end
                elseif obj and obj.Visible != nil then
                    obj.Visible = false
                end
            end
            continue
        end

        local Pos, OnScreen = Camera:WorldToViewportPoint(HRP.Position)
        local Distance = (Camera.CFrame.Position - HRP.Position).Magnitude
        local Scale = math.clamp(1 / (Distance / 50), 0.5, 2) * ESPSettings.ESPScale
        local BoxW, BoxH = 50 * Scale, 100 * Scale
        local BoxX, BoxY = Pos.X - BoxW / 2, Pos.Y - BoxH / 2

        local Color = TeamSettings.TeamColor.state and player.Team and player.Team.TeamColor.Color or
                      (player.Team == LocalPlayer.Team and LocalPlayer.Team and ESPSettings.AllyColor or ESPSettings.EnemyColor)

        if ESPBox.state and data.Box then
            data.Box.Position = Vector2.new(BoxX, BoxY)
            data.Box.Size = Vector2.new(BoxW, BoxH)
            data.Box.Color = Color
            data.Box.Thickness = ESPSettings.BoxThickness
            data.Box.Visible = OnScreen
        elseif data.Box then
            data.Box.Visible = false
        end

        if ShowHealthBar.state and data.HealthOutline and data.HealthBar then
            local HealthRatio = math.clamp(Humanoid.Health / Humanoid.MaxHealth, 0, 1)
            local BarWidth = ESPSettings.HealthBarWidth
            local State = HealthBarStates[player]
            State.CurrentHeight = State.CurrentHeight + (HealthRatio - State.CurrentHeight) * math.min(10 * delta, 1)
            
            data.HealthOutline.Position = Vector2.new(BoxX - BarWidth - ESPSettings.HealthBarOffset, BoxY)
            data.HealthOutline.Size = Vector2.new(BarWidth, BoxH)
            data.HealthOutline.Visible = OnScreen

            data.HealthBar.Position = Vector2.new(BoxX - BarWidth - ESPSettings.HealthBarOffset, BoxY + (1 - State.CurrentHeight) * BoxH)
            data.HealthBar.Size = Vector2.new(BarWidth, BoxH * State.CurrentHeight)
            data.HealthBar.Color = Color3.fromRGB(255 * (1 - State.CurrentHeight), 255 * State.CurrentHeight, 0)
            data.HealthBar.Visible = OnScreen
        else
            if data.HealthBar then data.HealthBar.Visible = false end
            if data.HealthOutline then data.HealthOutline.Visible = false end
        end

        if ShowDistance.state and data.Distance then
            data.Distance.Text = math.floor(Distance) .. "m"
            data.Distance.Position = Vector2.new(Pos.X, BoxY + BoxH + ESPSettings.DistanceTextOffset)
            data.Distance.Color = Color
            data.Distance.Size = ESPSettings.TextSize
            data.Distance.Visible = OnScreen
        elseif data.Distance then
            data.Distance.Visible = false
        end
        
        if ShowNames.state and data.Name then
            data.Name.Text = player.Name
            data.Name.Position = Vector2.new(Pos.X, BoxY - ESPSettings.NameTextOffset)
            data.Name.Color = Color
            data.Name.Size = ESPSettings.TextSize
            data.Name.Visible = OnScreen
        elseif data.Name then
            data.Name.Visible = false
        end
        
        if ShowVisibility.state and data.Visibility then
            local IsVisible = ShouldCheckVisibility and IsPlayerVisible(Character) or data.Visibility.Text == "Visible"
            local VisText = IsVisible and "Visible" or "Hidden"
            local VisColor = IsVisible and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
            local YOffset = ShowDistance.state and (ESPSettings.DistanceTextOffset + ESPSettings.TextSize + ESPSettings.VisibilityTextOffset) or ESPSettings.VisibilityTextOffset
            
            data.Visibility.Text = VisText
            data.Visibility.Position = Vector2.new(Pos.X, BoxY + BoxH + YOffset)
            data.Visibility.Color = VisColor
            data.Visibility.Size = ESPSettings.TextSize
            data.Visibility.Visible = OnScreen
        elseif data.Visibility then
            data.Visibility.Visible = false
        end

        if ShowSkeleton.state and data.Skeleton then
            local BodyParts = {
                Head = Character:FindFirstChild("Head"),
                UpperTorso = Character:FindFirstChild("UpperTorso") or Character:FindFirstChild("Torso"),
                LeftUpperArm = Character:FindFirstChild("LeftUpperArm"),
                RightUpperArm = Character:FindFirstChild("RightUpperArm"),
                LeftLowerLeg = Character:FindFirstChild("LeftLowerLeg"),
                RightLowerLeg = Character:FindFirstChild("RightLowerLeg")
            }

            if BodyParts.Head and BodyParts.UpperTorso then
                local HeadPos = Camera:WorldToViewportPoint(BodyParts.Head.Position)
                local TorsoPos = Camera:WorldToViewportPoint(BodyParts.UpperTorso.Position)
                
                data.Skeleton.HeadTorso.From = Vector2.new(HeadPos.X, HeadPos.Y)
                data.Skeleton.HeadTorso.To = Vector2.new(TorsoPos.X, TorsoPos.Y)
                data.Skeleton.HeadTorso.Color = ESPSettings.SkeletonColor
                data.Skeleton.HeadTorso.Visible = OnScreen

                if BodyParts.LeftUpperArm then
                    local ArmPos = Camera:WorldToViewportPoint(BodyParts.LeftUpperArm.Position)
                    data.Skeleton.TorsoLeftArm.From = Vector2.new(TorsoPos.X, TorsoPos.Y)
                    data.Skeleton.TorsoLeftArm.To = Vector2.new(ArmPos.X, ArmPos.Y)
                    data.Skeleton.TorsoLeftArm.Color = ESPSettings.SkeletonColor
                    data.Skeleton.TorsoLeftArm.Visible = OnScreen
                else
                    data.Skeleton.TorsoLeftArm.Visible = false
                end

                if BodyParts.RightUpperArm then
                    local ArmPos = Camera:WorldToViewportPoint(BodyParts.RightUpperArm.Position)
                    data.Skeleton.TorsoRightArm.From = Vector2.new(TorsoPos.X, TorsoPos.Y)
                    data.Skeleton.TorsoRightArm.To = Vector2.new(ArmPos.X, ArmPos.Y)
                    data.Skeleton.TorsoRightArm.Color = ESPSettings.SkeletonColor
                    data.Skeleton.TorsoRightArm.Visible = OnScreen
                else
                    data.Skeleton.TorsoRightArm.Visible = false
                end

                if BodyParts.LeftLowerLeg then
                    local LegPos = Camera:WorldToViewportPoint(BodyParts.LeftLowerLeg.Position)
                    data.Skeleton.TorsoLeftLeg.From = Vector2.new(TorsoPos.X, TorsoPos.Y)
                    data.Skeleton.TorsoLeftLeg.To = Vector2.new(LegPos.X, LegPos.Y)
                    data.Skeleton.TorsoLeftLeg.Color = ESPSettings.SkeletonColor
                    data.Skeleton.TorsoLeftLeg.Visible = OnScreen
                else
                    data.Skeleton.TorsoLeftLeg.Visible = false
                end

                if BodyParts.RightLowerLeg then
                    local LegPos = Camera:WorldToViewportPoint(BodyParts.RightLowerLeg.Position)
                    data.Skeleton.TorsoRightLeg.From = Vector2.new(TorsoPos.X, TorsoPos.Y)
                    data.Skeleton.TorsoRightLeg.To = Vector2.new(LegPos.X, LegPos.Y)
                    data.Skeleton.TorsoRightLeg.Color = ESPSettings.SkeletonColor
                    data.Skeleton.TorsoRightLeg.Visible = OnScreen
                else
                    data.Skeleton.TorsoRightLeg.Visible = false
                end
            else
                for _, line in pairs(data.Skeleton) do
                    line.Visible = false
                end
            end
        elseif data.Skeleton then
            for _, line in pairs(data.Skeleton) do
                line.Visible = false
            end
        end

        if ShowTracers.state and data.Tracer then
            local ScreenBottom = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
            data.Tracer.From = ScreenBottom
            data.Tracer.To = Vector2.new(Pos.X, Pos.Y)
            data.Tracer.Color = ESPSettings.TracerColor
            data.Tracer.Thickness = ESPSettings.TracerThickness
            data.Tracer.Visible = OnScreen
        elseif data.Tracer then
            data.Tracer.Visible = false
        end
    end

    if ShouldCheckVisibility then
        LastVisibilityCheck = CurrentTime
    end
end)

-- Periodic update (only when needed)
local LastSettingsUpdate = 0
local SettingsUpdateInterval = 1 -- Update settings every 1 second if changed

RunService.Heartbeat:Connect(function()
    local CurrentTime = tick()
    if CurrentTime - LastSettingsUpdate >= SettingsUpdateInterval then
        UpdateAllESPSettings()
        LastSettingsUpdate = CurrentTime
    end
end)

_G.CROW:SendNotification("ESP initialized successfully!", 5)
