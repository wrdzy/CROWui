-- Services
_G.Players = game:GetService("Players")
_G.RunService = game:GetService("RunService")
_G.Teams = game:GetService("Teams")

-- Validate critical objects
_G.LocalPlayer = _G.Players.LocalPlayer
if not _G.LocalPlayer then
    return
end

_G.Camera = workspace.CurrentCamera
if not _G.Camera then
    return
end

-- Validate ESPTab (assumed to be defined in the larger script)
if not ESPTab then
    return
end

-- Create ESP sections
_G.secesp = ESPTab:AddSection("ESP", 1)
_G.seccustomesp = ESPTab:AddSection("Customise ESP", 2)

-- Store references to all UI elements and ESP objects
_G.ESPObjects = {}

-- Store current settings values with defaults
_G.ESPSettings = {
    BoxThickness = 2,
    TextSize = 15,
    AllyColor = Color3.fromRGB(96, 205, 255),
    EnemyColor = Color3.fromRGB(255, 70, 70),
    SkeletonColor = Color3.fromRGB(255, 255, 255),
    TracerColor = Color3.fromRGB(255, 255, 255),
    HealthBarWidth = 4,
    HealthBarOffset = 2,
    ESPScale = 1,
    SkeletonThickness = 1,
    TracerThickness = 1,
    NameTextOffset = 16,
    DistanceTextOffset = 2,
    VisibilityTextOffset = 2
}

-- Track health bar animation states
_G.HealthBarStates = {}

-- Setup Main ESP section
_G.secesp:AddSeparator({
    enabled = true,
    text = "Main"
})

-- Main ESP Toggle
_G.ShowESP = _G.secesp:AddToggle({
    text = "Enable ESP",
    state = false,
    tooltip = "Master switch for ESP features",
    flag = "ShowESP"
})

_G.ShowESP:AddBind({
    enabled = true,
    text = "Toggle ESP",
    tooltip = "Hotkey to toggle ESP",
    mode = "toggle",
    bind = "NONE",
    flag = "ESPToggleKey",
    callback = function(state)
        _G.ShowESP.state = state
    end
})

-- ESP Features Toggles
_G.ESPBox = _G.secesp:AddToggle({
    text = "Show Box",
    state = false,
    tooltip = "Show box around players",
    flag = "ESPBox"
})

_G.ShowHealthBar = _G.secesp:AddToggle({
    text = "Show Health Bar",
    state = false,
    tooltip = "Show health bar next to players",
    flag = "ShowHealthBar"
})

_G.ShowDistance = _G.secesp:AddToggle({
    text = "Show Distance",
    state = false,
    tooltip = "Show distance to players",
    flag = "ShowDistance"
})

_G.ShowNames = _G.secesp:AddToggle({
    text = "Show Names",
    state = false,
    tooltip = "Show player names",
    flag = "ShowNames"
})

_G.ShowVisibility = _G.secesp:AddToggle({
    text = "Show Visibility",
    state = false,
    tooltip = "Show if players are visible",
    flag = "ShowVisibility"
})

_G.ShowSkeleton = _G.secesp:AddToggle({
    text = "Show Skeleton",
    state = false,
    tooltip = "Show player skeleton",
    flag = "ShowSkeleton"
})

_G.ShowTracers = _G.secesp:AddToggle({
    text = "Show Tracers",
    state = false,
    tooltip = "Show lines to players",
    flag = "ShowTracers"
})

-- Store all ESP toggles in a table
_G.ESPToggles = {
    Distance = _G.ShowDistance,
    Names = _G.ShowNames,
    Visibility = _G.ShowVisibility,
    Skeleton = _G.ShowSkeleton,
    Tracers = _G.ShowTracers
}

_G.secesp:AddSeparator({
    enabled = true,
    text = "Team Settings"
})

-- Team ESP Settings stored in table
_G.TeamSettings = {
    TeamCheck = _G.secesp:AddToggle({
        text = "Only Show Enemies",
        state = false,
        tooltip = "Only show ESP for enemy players",
        flag = "ESPTeamCheck"
    }),

    TeamColor = _G.secesp:AddToggle({
        text = "Use Team Colors",
        state = false,
        tooltip = "Use team colors for ESP",
        flag = "ESPTeamColor"
    })
}

-- Function to get all teams in the game
_G.getTeamNames = function()
    _G.teamNames = {}
    for _, team in ipairs(_G.Teams:GetTeams()) do
        if team.Name and team.Name ~= "Neutral" then
            table.insert(_G.teamNames, team.Name)
        end
    end
    return _G.teamNames
end

_G.seccustomesp:AddSeparator({
    enabled = true,
    text = "Colors"
})

-- Team color settings
_G.AllyColor = _G.seccustomesp:AddColor({
    enabled = true,
    text = "Ally Color",
    tooltip = "Set the color for teammates",
    color = _G.ESPSettings.AllyColor,
    flag = "AllyColor",
    trans = 0,
    open = false,
    callback = function(color)
        _G.ESPSettings.AllyColor = color or _G.ESPSettings.AllyColor
    end
})

_G.EnemyColor = _G.seccustomesp:AddColor({
    enabled = true,
    text = "Enemy Color",
    tooltip = "Set the color for enemies",
    color = _G.ESPSettings.EnemyColor,
    flag = "EnemyColor",
    trans = 0,
    open = false,
    callback = function(color)
        _G.ESPSettings.EnemyColor = color or _G.ESPSettings.EnemyColor
    end
})

_G.SkeletonColor = _G.seccustomesp:AddColor({
    enabled = true,
    text = "Skeleton Color",
    tooltip = "Set the color for skeleton lines",
    color = _G.ESPSettings.SkeletonColor,
    flag = "SkeletonColor",
    trans = 0,
    open = false,
    callback = function(color)
        _G.ESPSettings.SkeletonColor = color or _G.ESPSettings.SkeletonColor
    end
})

_G.TracerColor = _G.seccustomesp:AddColor({
    enabled = true,
    text = "Tracer Color",
    tooltip = "Set the color for tracer lines",
    color = _G.ESPSettings.TracerColor,
    flag = "TracerColor",
    trans = 0,
    open = false,
    callback = function(color)
        _G.ESPSettings.TracerColor = color or _G.ESPSettings.TracerColor
    end
})

_G.seccustomesp:AddSeparator({
    enabled = true,
    text = "Size Settings"
})

-- Box Thickness Slider
_G.BoxThickness = _G.seccustomesp:AddSlider({
    text = "Box Thickness",
    min = 1,
    max = 5,
    default = 2,
    increment = 1,
    suffix = "px",
    tooltip = "Adjust the thickness of ESP boxes",
    flag = "BoxThickness",
    callback = function(value)
        _G.ESPSettings.BoxThickness = value or 2
        for _, data in pairs(_G.ESPObjects) do
            if data.Box then
                data.Box.Thickness = _G.ESPSettings.BoxThickness
            end
        end
    end
})

-- Text Size Slider
_G.TextSize = _G.seccustomesp:AddSlider({
    text = "Text Size",
    min = 10,
    max = 24,
    default = 15,
    increment = 1,
    suffix = "pt",
    tooltip = "Adjust the size of ESP text",
    flag = "TextSize",
    callback = function(value)
        _G.ESPSettings.TextSize = value or 15
        for _, data in pairs(_G.ESPObjects) do
            if data.Distance then data.Distance.Size = _G.ESPSettings.TextSize end
            if data.Name then data.Name.Size = _G.ESPSettings.TextSize end
            if data.Visibility then data.Visibility.Size = _G.ESPSettings.TextSize end
        end
    end
})

-- Health Bar Width Slider
_G.HealthBarWidth = _G.seccustomesp:AddSlider({
    text = "Health Bar Width",
    min = 2,
    max = 8,
    default = 4,
    increment = 1,
    suffix = "px",
    tooltip = "Adjust the width of health bars",
    flag = "HealthBarWidth",
    callback = function(value)
        _G.ESPSettings.HealthBarWidth = value or 4
    end
})

-- Health Bar Offset Slider
_G.HealthBarOffset = _G.seccustomesp:AddSlider({
    text = "Health Bar Offset",
    min = 0,
    max = 10,
    default = 2,
    increment = 1,
    suffix = "px",
    tooltip = "Adjust the distance of health bar from box",
    flag = "HealthBarOffset",
    callback = function(value)
        _G.ESPSettings.HealthBarOffset = value or 2
    end
})

-- Skeleton Thickness Slider
_G.SkeletonThickness = _G.seccustomesp:AddSlider({
    text = "Skeleton Thickness",
    min = 1,
    max = 4,
    default = 1,
    increment = 1,
    suffix = "px",
    tooltip = "Adjust the thickness of skeleton lines",
    flag = "SkeletonThickness",
    callback = function(value)
        _G.ESPSettings.SkeletonThickness = value or 1
        for _, data in pairs(_G.ESPObjects) do
            for _, line in pairs(data.Skeleton or {}) do
                line.Thickness = _G.ESPSettings.SkeletonThickness
            end
        end
    end
})

-- Tracer Thickness Slider
_G.TracerThickness = _G.seccustomesp:AddSlider({
    text = "Tracer Thickness",
    min = 1,
    max = 4,
    default = 1,
    increment = 1,
    suffix = "px",
    tooltip = "Adjust the thickness of tracer lines",
    flag = "TracerThickness",
    callback = function(value)
        _G.ESPSettings.TracerThickness = value or 1
        for _, data in pairs(_G.ESPObjects) do
            if data.Tracer then
                data.Tracer.Thickness = _G.ESPSettings.TracerThickness
            end
        end
    end
})

-- Name Text Offset Slider
_G.NameTextOffset = _G.seccustomesp:AddSlider({
    text = "Name Text Offset",
    min = 0,
    max = 30,
    default = 16,
    increment = 1,
    suffix = "px",
    tooltip = "Adjust the distance of name text above box",
    flag = "NameTextOffset",
    callback = function(value)
        _G.ESPSettings.NameTextOffset = value or 16
    end
})

-- Distance Text Offset Slider
_G.DistanceTextOffset = _G.seccustomesp:AddSlider({
    text = "Distance Text Offset",
    min = 0,
    max = 20,
    default = 2,
    increment = 1,
    suffix = "px",
    tooltip = "Adjust the distance of distance text below box",
    flag = "DistanceTextOffset",
    callback = function(value)
        _G.ESPSettings.DistanceTextOffset = value or 2
    end
})

-- Visibility Text Offset Slider
_G.VisibilityTextOffset = _G.seccustomesp:AddSlider({
    text = "Visibility Text Offset",
    min = 0,
    max = 20,
    default = 2,
    increment = 1,
    suffix = "px",
    tooltip = "Adjust the distance of visibility text below box",
    flag = "VisibilityTextOffset",
    callback = function(value)
        _G.ESPSettings.VisibilityTextOffset = value or 2
    end
})

-- ESP Scale Slider
_G.ESPScale = _G.seccustomesp:AddSlider({
    text = "ESP Scale",
    min = 50,
    max = 150,
    default = 100,
    increment = 10,
    suffix = "%",
    tooltip = "Adjust the overall scale of ESP elements",
    flag = "ESPScale",
    callback = function(value)
        _G.ESPSettings.ESPScale = value / 100
    end
})

-- Create ESP for a player
_G.createESP = function(player)
    if player == _G.LocalPlayer or _G.ESPObjects[player] or not player:IsA("Player") then
        return
    end
    
    _G.success, _G.data = pcall(function()
        return {
            Box = Drawing.new("Square"),
            Distance = Drawing.new("Text"),
            HealthOutline = Drawing.new("Square"),
            HealthBar = Drawing.new("Square"),
            Name = Drawing.new("Text"),
            Visibility = Drawing.new("Text"),
            Tracer = Drawing.new("Line"),
            Skeleton = {
                HeadTorso = Drawing.new("Line"),
                TorsoLeftArm = Drawing.new("Line"),
                TorsoRightArm = Drawing.new("Line"),
                TorsoLeftLeg = Drawing.new("Line"),
                TorsoRightLeg = Drawing.new("Line")
            }
        }
    end)
    
    if not _G.success then
        return
    end
    
    -- Initialize ESP box
    _G.data.Box.Thickness = _G.ESPSettings.BoxThickness
    _G.data.Box.Filled = false
    _G.data.Box.Visible = false
    
    -- Initialize distance text
    _G.data.Distance.Size = _G.ESPSettings.TextSize
    _G.data.Distance.Center = true
    _G.data.Distance.Outline = true
    _G.data.Distance.OutlineColor = Color3.new(0, 0, 0)
    _G.data.Distance.Font = Drawing.Fonts.UI
    _G.data.Distance.Visible = false
    
    -- Initialize health bar
    _G.data.HealthOutline.Thickness = 1
    _G.data.HealthOutline.Filled = true
    _G.data.HealthOutline.Color = Color3.new(0, 0, 0)
    _G.data.HealthOutline.Visible = false
    
    _G.data.HealthBar.Thickness = 1
    _G.data.HealthBar.Filled = true
    _G.data.HealthBar.Color = Color3.new(0, 1, 0)
    _G.data.HealthBar.Visible = false
    
    -- Initialize name
    _G.data.Name.Size = _G.ESPSettings.TextSize
    _G.data.Name.Center = true
    _G.data.Name.Outline = true
    _G.data.Name.OutlineColor = Color3.new(0, 0, 0)
    _G.data.Name.Font = Drawing.Fonts.UI
    _G.data.Name.Visible = false
    
    -- Initialize visibility text
    _G.data.Visibility.Size = _G.ESPSettings.TextSize
    _G.data.Visibility.Center = true
    _G.data.Visibility.Outline = true
    _G.data.Visibility.OutlineColor = Color3.new(0, 0, 0)
    _G.data.Visibility.Font = Drawing.Fonts.UI
    _G.data.Visibility.Visible = false
    
    -- Initialize tracer
    _G.data.Tracer.Thickness = _G.ESPSettings.TracerThickness
    _G.data.Tracer.Visible = false
    
    -- Initialize skeleton
    for _, line in pairs(_G.data.Skeleton) do
        line.Thickness = _G.ESPSettings.SkeletonThickness
        line.Visible = false
    end
    
    _G.ESPObjects[player] = _G.data
    _G.HealthBarStates[player] = { CurrentHeight = 0 }
end

-- Remove ESP for a player
_G.removeESP = function(player)
    _G.data = _G.ESPObjects[player]
    if not _G.data then
        return
    end
    
    for _, obj in pairs(_G.data) do
        if type(obj) == "table" then
            for _, line in pairs(obj) do
                if line and line.Remove then
                    line:Remove()
                end
            end
        elseif obj and obj.Remove then
            obj:Remove()
        end
    end
    _G.ESPObjects[player] = nil
    _G.HealthBarStates[player] = nil
end

-- Check if player is visible
_G.isPlayerVisible = function(character)
    if not _G.LocalPlayer.Character or not character then
        return false
    end
    
    _G.localHead = _G.LocalPlayer.Character:FindFirstChild("Head")
    _G.targetHead = character:FindFirstChild("Head")
    
    if not _G.localHead or not _G.targetHead then
        return false
    end
    
    _G.ray = Ray.new(_G.localHead.Position, (_G.targetHead.Position - _G.localHead.Position).Unit * 1000)
    _G.ignoreList = {_G.LocalPlayer.Character}
    _G.hitPart = workspace:FindPartOnRayWithIgnoreList(_G.ray, _G.ignoreList)
    
    return _G.hitPart and _G.hitPart:IsDescendantOf(character)
end

-- Update all ESP settings
_G.updateAllESPSettings = function()
    for _, data in pairs(_G.ESPObjects) do
        if data.Box then
            data.Box.Thickness = _G.ESPSettings.BoxThickness
        end
        if data.Distance then
            data.Distance.Size = _G.ESPSettings.TextSize
        end
        if data.Name then
            data.Name.Size = _G.ESPSettings.TextSize
        end
        if data.Visibility then
            data.Visibility.Size = _G.ESPSettings.TextSize
        end
        if data.Tracer then
            data.Tracer.Thickness = _G.ESPSettings.TracerThickness
        end
        for _, line in pairs(data.Skeleton or {}) do
            line.Thickness = _G.ESPSettings.SkeletonThickness
        end
    end
end

-- Create ESP for existing players
for _, player in ipairs(_G.Players:GetPlayers()) do
    _G.createESP(player)
end

-- Handle player joining and leaving
_G.Players.PlayerAdded:Connect(_G.createESP)
_G.Players.PlayerRemoving:Connect(_G.removeESP)

-- ESP rendering logic
_G.RunService.RenderStepped:Connect(function(delta)
    if not _G.ShowESP.state then
        for _, data in pairs(_G.ESPObjects) do
            for key, obj in pairs(data) do
                if type(obj) == "table" then
                    for _, line in pairs(obj) do
                        if line and line.Visible ~= nil then
                            line.Visible = false
                        end
                    end
                elseif obj and obj.Visible ~= nil then
                    obj.Visible = false
                end
            end
        end
        return
    end

    for player, data in pairs(_G.ESPObjects) do
        _G.character = player.Character
        _G.hrp = _G.character and _G.character:FindFirstChild("HumanoidRootPart")
        _G.humanoid = _G.character and _G.character:FindFirstChild("Humanoid")

        if not (player:IsA("Player") and _G.character and _G.hrp and _G.humanoid and _G.humanoid.Health > 0) then
            for key, obj in pairs(data) do
                if type(obj) == "table" then
                    for _, line in pairs(obj) do
                        if line and line.Visible ~= nil then
                            line.Visible = false
                        end
                    end
                elseif obj and obj.Visible ~= nil then
                    obj.Visible = false
                end
            end
            continue
        end
        
        if _G.TeamSettings.TeamCheck.state and player.Team == _G.LocalPlayer.Team and _G.LocalPlayer.Team then
            for key, obj in pairs(data) do
                if type(obj) == "table" then
                    for _, line in pairs(obj) do
                        if line and line.Visible ~= nil then
                            line.Visible = false
                        end
                    end
                elseif obj and obj.Visible ~= nil then
                    obj.Visible = false
                end
            end
            continue
        end

        _G.pos, _G.onScreen = _G.Camera:WorldToViewportPoint(_G.hrp.Position)
        _G.distance = (_G.Camera.CFrame.Position - _G.hrp.Position).Magnitude
        _G.scale = math.clamp(1 / (_G.distance / 50), 0.5, 2) * _G.ESPSettings.ESPScale
        _G.boxW, _G.boxH = 50 * _G.scale, 100 * _G.scale
        _G.boxX, _G.boxY = _G.pos.X - _G.boxW / 2, _G.pos.Y - _G.boxH / 2

        _G.color
        if _G.TeamSettings.TeamColor.state and player.Team then
            _G.color = player.Team.TeamColor.Color
        elseif player.Team == _G.LocalPlayer.Team and _G.LocalPlayer.Team then
            _G.color = _G.ESPSettings.AllyColor
        else
            _G.color = _G.ESPSettings.EnemyColor
        end

        if _G.ESPBox.state and data.Box then
            data.Box.Position = Vector2.new(_G.boxX, _G.boxY)
            data.Box.Size = Vector2.new(_G.boxW, _G.boxH)
            data.Box.Color = _G.color
            data.Box.Thickness = _G.ESPSettings.BoxThickness
            data.Box.Visible = _G.onScreen
        elseif data.Box then
            data.Box.Visible = false
        end

        if _G.ShowHealthBar.state and data.HealthOutline and data.HealthBar then
            _G.healthRatio = math.clamp(_G.humanoid.Health / _G.humanoid.MaxHealth, 0, 1)
            _G.barWidth = _G.ESPSettings.HealthBarWidth
            _G.state = _G.HealthBarStates[player]
            _G.state.CurrentHeight = _G.state.CurrentHeight + (_G.healthRatio - _G.state.CurrentHeight) * math.min(10 * delta, 1)
            
            data.HealthOutline.Position = Vector2.new(_G.boxX - _G.barWidth - _G.ESPSettings.HealthBarOffset, _G.boxY)
            data.HealthOutline.Size = Vector2.new(_G.barWidth, _G.boxH)
            data.HealthOutline.Visible = _G.onScreen

            data.HealthBar.Position = Vector2.new(_G.boxX - _G.barWidth - _G.ESPSettings.HealthBarOffset, _G.boxY + (1 - _G.state.CurrentHeight) * _G.boxH)
            data.HealthBar.Size = Vector2.new(_G.barWidth, _G.boxH * _G.state.CurrentHeight)
            data.HealthBar.Color = Color3.fromRGB(255 * (1 - _G.state.CurrentHeight), 255 * _G.state.CurrentHeight, 0)
            data.HealthBar.Visible = _G.onScreen
        else
            if data.HealthBar then data.HealthBar.Visible = false end
            if data.HealthOutline then data.HealthOutline.Visible = false end
        end

        if _G.ShowDistance.state and data.Distance then
            data.Distance.Text = math.floor(_G.distance) .. "m"
            data.Distance.Position = Vector2.new(_G.pos.X, _G.boxY + _G.boxH + _G.ESPSettings.DistanceTextOffset)
            data.Distance.Color = _G.color
            data.Distance.Size = _G.ESPSettings.TextSize
            data.Distance.Visible = _G.onScreen
        elseif data.Distance then
            data.Distance.Visible = false
        end
        
        if _G.ShowNames.state and data.Name then
            data.Name.Text = player.Name
            data.Name.Position = Vector2.new(_G.pos.X, _G.boxY - _G.ESPSettings.NameTextOffset)
            data.Name.Color = _G.color
            data.Name.Size = _G.ESPSettings.TextSize
            data.Name.Visible = _G.onScreen
        elseif data.Name then
            data.Name.Visible = false
        end
        
        if _G.ShowVisibility.state and data.Visibility then
            _G.isVisible = _G.isPlayerVisible(_G.character)
            _G.visText = _G.isVisible and "Visible" or "Hidden"
            _G.visColor = _G.isVisible and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
            _G.yOffset = _G.ShowDistance.state and _G.ESPSettings.DistanceTextOffset + _G.ESPSettings.TextSize + _G.ESPSettings.VisibilityTextOffset or _G.ESPSettings.VisibilityTextOffset
            
            data.Visibility.Text = _G.visText
            data.Visibility.Position = Vector2.new(_G.pos.X, _G.boxY + _G.boxH + _G.yOffset)
            data.Visibility.Color = _G.visColor
            data.Visibility.Size = _G.ESPSettings.TextSize
            data.Visibility.Visible = _G.onScreen
        elseif data.Visibility then
            data.Visibility.Visible = false
        end

        if _G.ShowSkeleton.state and data.Skeleton then
            _G.bodyParts = {
                Head = _G.character:FindFirstChild("Head"),
                UpperTorso = _G.character:FindFirstChild("UpperTorso") or _G.character:FindFirstChild("Torso"),
                LeftUpperArm = _G.character:FindFirstChild("LeftUpperArm"),
                RightUpperArm = _G.character:FindFirstChild("RightUpperArm"),
                LeftLowerLeg = _G.character:FindFirstChild("LeftLowerLeg"),
                RightLowerLeg = _G.character:FindFirstChild("RightLowerLeg")
            }

            if _G.bodyParts.Head and _G.bodyParts.UpperTorso then
                _G.headPos = _G.Camera:WorldToViewportPoint(_G.bodyParts.Head.Position)
                _G.torsoPos = _G.Camera:WorldToViewportPoint(_G.bodyParts.UpperTorso.Position)
                
                data.Skeleton.HeadTorso.From = Vector2.new(_G.headPos.X, _G.headPos.Y)
                data.Skeleton.HeadTorso.To = Vector2.new(_G.torsoPos.X, _G.torsoPos.Y)
                data.Skeleton.HeadTorso.Color = _G.ESPSettings.SkeletonColor
                data.Skeleton.HeadTorso.Visible = _G.onScreen

                if _G.bodyParts.LeftUpperArm then
                    _G.armPos = _G.Camera:WorldToViewportPoint(_G.bodyParts.LeftUpperArm.Position)
                    data.Skeleton.TorsoLeftArm.From = Vector2.new(_G.torsoPos.X, _G.torsoPos.Y)
                    data.Skeleton.TorsoLeftArm.To = Vector2.new(_G.armPos.X, _G.armPos.Y)
                    data.Skeleton.TorsoLeftArm.Color = _G.ESPSettings.SkeletonColor
                    data.Skeleton.TorsoLeftArm.Visible = _G.onScreen
                else
                    data.Skeleton.TorsoLeftArm.Visible = false
                end

                if _G.bodyParts.RightUpperArm then
                    _G.armPos = _G.Camera:WorldToViewportPoint(_G.bodyParts.RightUpperArm.Position)
                    data.Skeleton.TorsoRightArm.From = Vector2.new(_G.torsoPos.X, _G.torsoPos.Y)
                    data.Skeleton.TorsoRightArm.To = Vector2.new(_G.armPos.X, _G.armPos.Y)
                    data.Skeleton.TorsoRightArm.Color = _G.ESPSettings.SkeletonColor
                    data.Skeleton.TorsoRightArm.Visible = _G.onScreen
                else
                    data.Skeleton.TorsoRightArm.Visible = false
                end

                if _G.bodyParts.LeftLowerLeg then
                    _G.legPos = _G.Camera:WorldToViewportPoint(_G.bodyParts.LeftLowerLeg.Position)
                    data.Skeleton.TorsoLeftLeg.From = Vector2.new(_G.torsoPos.X, _G.torsoPos.Y)
                    data.Skeleton.TorsoLeftLeg.To = Vector2.new(_G.legPos.X, _G.legPos.Y)
                    data.Skeleton.TorsoLeftLeg.Color = _G.ESPSettings.SkeletonColor
                    data.Skeleton.TorsoLeftLeg.Visible = _G.onScreen
                else
                    data.Skeleton.TorsoLeftLeg.Visible = false
                end

                if _G.bodyParts.RightLowerLeg then
                    _G.legPos = _G.Camera:WorldToViewportPoint(_G.bodyParts.RightLowerLeg.Position)
                    data.Skeleton.TorsoRightLeg.From = Vector2.new(_G.torsoPos.X, _G.torsoPos.Y)
                    data.Skeleton.TorsoRightLeg.To = Vector2.new(_G.legPos.X, _G.legPos.Y)
                    data.Skeleton.TorsoRightLeg.Color = _G.ESPSettings.SkeletonColor
                    data.Skeleton.TorsoRightLeg.Visible = _G.onScreen
                else
                    data.Skeleton.TorsoRightLeg.Visible = false
                end
            else
                for _, line in pairs(data.Skeleton) do
                    line.Visible = false
                end
            end
        elseif data.Skeleton then
            for _, line in pairs(data.Skeleton) do
                line.Visible = false
            end
        end

        if _G.ShowTracers.state and data.Tracer then
            _G.screenBottom = Vector2.new(_G.Camera.ViewportSize.X / 2, _G.Camera.ViewportSize.Y)
            data.Tracer.From = _G.screenBottom
            data.Tracer.To = Vector2.new(_G.pos.X, _G.pos.Y)
            data.Tracer.Color = _G.ESPSettings.TracerColor
            data.Tracer.Thickness = _G.ESPSettings.TracerThickness
            data.Tracer.Visible = _G.onScreen
        elseif data.Tracer then
            data.Tracer.Visible = false
        end
    end
end)

-- Periodic update
_G.task.spawn(function()
    while true do
        _G.task.wait(1)
        _G.updateAllESPSettings()
    end
end)
