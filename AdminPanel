-- AdminPanel.lua - Comprehensive Admin Panel for CROW
-- This file should be hosted at: https://raw.githubusercontent.com/wrdzy/CROWui/refs/heads/main/AdminPanel

print("Loading Admin Panel...")

if not _G.isAdmin then
    warn("Access denied: Not an admin")
    return
end

-- Services
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Admin Panel Variables
_G.AdminPanel = _G.AdminPanel or {}
_G.AdminPanel.BlacklistCache = {}
_G.AdminPanel.RefreshInProgress = false
_G.AdminPanel.AutoRefresh = false
_G.AdminPanel.MonitoringPlayers = false

-- UI Sections
local MainSection = _G.AdminTab:AddSection("Admin Controls")
local BlacklistSection = _G.AdminTab:AddSection("Blacklist Management")
local PlayerSection = _G.AdminTab:AddSection("Player Monitoring")
local ServerSection = _G.AdminTab:AddSection("Server Management")

-- ===================== MAIN ADMIN CONTROLS =====================
MainSection:AddSeparator({ text = "Admin Information" })

-- Using button-style info display since labels aren't available
MainSection:AddButton("CROW Admin Panel v1.0.5", function() end)
MainSection:AddButton("Admin ID: " .. tostring(_G.userId), function() end)
MainSection:AddButton("Total Admins: " .. #_G.Admins, function() end)

MainSection:AddSeparator({ text = "Quick Actions" })

MainSection:AddButton("Refresh All Data", function()
    refreshAllData()
end)

MainSection:AddButton("Reload All Sections", function()
    reloadAllSections()
end)

MainSection:AddToggle({
    text = "Auto Refresh Data",
    state = false,
    flag = "AdminAutoRefresh",
    tooltip = "Automatically refresh blacklist every 30 seconds",
    callback = function(state)
        _G.AdminPanel.AutoRefresh = state
        if state then
            startAutoRefresh()
        end
    end
})

-- ===================== BLACKLIST MANAGEMENT =====================
BlacklistSection:AddSeparator({ text = "Blacklist Controls" })

BlacklistSection:AddTextBox("Add Player to Blacklist", "Enter UserID or Username", function(input)
    if input and input ~= "" then
        addPlayerToBlacklist(input)
    end
end)

BlacklistSection:AddTextBox("Remove Player from Blacklist", "Enter UserID", function(input)
    if input and input ~= "" then
        removePlayerFromBlacklist(input)
    end
end)

BlacklistSection:AddSeparator({ text = "Search & Display" })

BlacklistSection:AddTextBox("Search Blacklist", "Search by name, display name, or ID", function(input)
    searchBlacklist(input)
end)

BlacklistSection:AddToggle({
    text = "Show Detailed Info",
    state = true,
    flag = "ShowDetailedBlacklistInfo",
    tooltip = "Show creation date, status, etc.",
    callback = function(state)
        updateBlacklistDisplay()
    end
})

BlacklistSection:AddSlider({
    text = "Max Display Results",
    min = 5,
    max = 50,
    increment = 5,
    default = 15,
    flag = "MaxDisplayResults",
    tooltip = "Maximum players to show in list",
    callback = function(value)
        updateBlacklistDisplay()
    end
})

-- Blacklist Display Button (will update text)
_G.AdminPanel.BlacklistDisplay = BlacklistSection:AddButton("Loading blacklisted players...", function()
    refreshBlacklistInfo()
end)

BlacklistSection:AddSeparator({ text = "Blacklist Actions" })

BlacklistSection:AddButton("Export Blacklist", function()
    exportBlacklist()
end)

BlacklistSection:AddButton("Clear Search", function()
    library.flags["SearchBlacklistInput"] = ""
    updateBlacklistDisplay()
end)

-- ===================== PLAYER MONITORING ===================== 
PlayerSection:AddSeparator({ text = "Current Players" })

-- Player count display
_G.AdminPanel.PlayerCountButton = PlayerSection:AddButton("Players in server: " .. #Players:GetPlayers(), function()
    updatePlayerList()
end)

PlayerSection:AddToggle({
    text = "Monitor Player Activity",
    state = false,
    flag = "MonitorPlayers", 
    tooltip = "Track player joins/leaves and display info",
    callback = function(state)
        _G.AdminPanel.MonitoringPlayers = state
        if state then
            startPlayerMonitoring()
        end
    end
})

PlayerSection:AddList({
    text = "Player Info Display",
    selected = "Basic",
    values = {"Basic", "Detailed", "Advanced"},
    flag = "PlayerInfoLevel",
    tooltip = "Choose how much player info to show"
})

-- Player list display button
_G.AdminPanel.PlayerListDisplay = PlayerSection:AddButton("Enable monitoring to see player list", function()
    if _G.AdminPanel.MonitoringPlayers then
        updatePlayerList()
    else
        _G.CROW:SendNotification("Enable player monitoring first", 2)
    end
end)

PlayerSection:AddSeparator({ text = "Player Actions" })

PlayerSection:AddTextBox("Kick Player", "Enter username or UserID", function(input)
    if input and input ~= "" then
        kickPlayer(input)
    end
end)

PlayerSection:AddTextBox("Get Player Info", "Enter username or UserID", function(input)
    if input and input ~= "" then
        getDetailedPlayerInfo(input)
    end
end)

-- ===================== SERVER MANAGEMENT =====================
ServerSection:AddSeparator({ text = "Server Controls" })

ServerSection:AddButton("Kick All Non-Admins", function()
    kickAllNonAdmins()
end)

ServerSection:AddButton("Announce to Server", function()
    announceToServer()
end)

ServerSection:AddToggle({
    text = "Auto-Kick Blacklisted",
    state = true,
    flag = "AutoKickBlacklisted",
    tooltip = "Automatically kick players when they join if blacklisted"
})

ServerSection:AddSeparator({ text = "Server Information" })

-- Game info using buttons
local gameInfo = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)
ServerSection:AddButton("Game: " .. (gameInfo.Name or "Unknown"), function() end)
ServerSection:AddButton("Place ID: " .. tostring(game.PlaceId), function() end)
ServerSection:AddButton("Job ID: " .. tostring(game.JobId):sub(1, 8) .. "...", function() end)

ServerSection:AddSeparator({ text = "Performance" })

-- Performance monitoring buttons
_G.AdminPanel.FPSButton = ServerSection:AddButton("FPS: Calculating...", function() end)
_G.AdminPanel.PingButton = ServerSection:AddButton("Ping: Calculating...", function() end)

-- ===================== FUNCTIONS =====================

-- Function to get player info from UserID
local function getPlayerInfo(userId)
    local success, result = pcall(function()
        local url = "https://users.roblox.com/v1/users/" .. tostring(userId)
        local response = HttpService:GetAsync(url)
        local data = HttpService:JSONDecode(response)
        return {
            id = data.id,
            name = data.name,
            displayName = data.displayName,
            description = data.description or "No description",
            created = data.created or "Unknown",
            isBanned = data.isBanned or false,
            hasVerifiedBadge = data.hasVerifiedBadge or false
        }
    end)
    
    if success then
        return result
    else
        return {
            id = userId,
            name = "Unknown",
            displayName = "Unknown",
            description = "Failed to fetch", 
            created = "Unknown",
            isBanned = false,
            hasVerifiedBadge = false
        }
    end
end

-- Function to refresh all admin data
function refreshAllData()
    _G.CROW:SendNotification("Refreshing all admin data...", 3)
    refreshBlacklistInfo()
    updatePlayerList()
end

-- Function to refresh blacklist information
function refreshBlacklistInfo()
    if _G.AdminPanel.RefreshInProgress then
        _G.CROW:SendNotification("Refresh already in progress...", 2)
        return
    end
    
    _G.AdminPanel.RefreshInProgress = true
    _G.CROW:SendNotification("Refreshing blacklist...", 2)
    
    task.spawn(function()
        _G.AdminPanel.BlacklistCache = {}
        
        for i, userId in ipairs(_G.BlacklistedPlayers) do
            local playerInfo = getPlayerInfo(userId)
            table.insert(_G.AdminPanel.BlacklistCache, playerInfo)
            
            if i % 3 == 0 or i == #_G.BlacklistedPlayers then
                updateBlacklistDisplay()
                task.wait(0.2)
            end
        end
        
        updateBlacklistDisplay()
        _G.AdminPanel.RefreshInProgress = false
        _G.CROW:SendNotification("Blacklist refreshed! (" .. #_G.BlacklistedPlayers .. " players)", 3)
    end)
end

-- Function to update blacklist display
function updateBlacklistDisplay()
    if not _G.AdminPanel.BlacklistDisplay then return end
    
    local maxResults = library.flags["MaxDisplayResults"] or 15
    local showDetailed = library.flags["ShowDetailedBlacklistInfo"]
    local searchQuery = library.flags["SearchBlacklistInput"] or ""
    
    local displayText = "=== BLACKLISTED PLAYERS (" .. #_G.BlacklistedPlayers .. ") ===\n"
    
    local playersToShow = _G.AdminPanel.BlacklistCache
    
    -- Apply search filter
    if searchQuery and searchQuery ~= "" then
        local filteredPlayers = {}
        local query = string.lower(searchQuery)
        
        for _, player in ipairs(_G.AdminPanel.BlacklistCache) do
            local name = string.lower(player.name)
            local displayName = string.lower(player.displayName)
            local id = tostring(player.id)
            
            if string.find(name, query) or string.find(displayName, query) or string.find(id, query) then
                table.insert(filteredPlayers, player)
            end
        end
        
        playersToShow = filteredPlayers
        displayText = "=== SEARCH: '" .. searchQuery .. "' (" .. #filteredPlayers .. " results) ===\n"
    end
    
    if #playersToShow == 0 then
        displayText = displayText .. "No players found."
    else
        for i, player in ipairs(playersToShow) do
            if i > maxResults then
                displayText = displayText .. "... and " .. (#playersToShow - maxResults) .. " more players"
                break
            end
            
            if showDetailed then
                displayText = displayText .. string.format(
                    "[%d] %s (@%s) | ID: %s\n" ..
                    "    Status: %s%s | Created: %s\n",
                    i,
                    player.displayName,
                    player.name,
                    tostring(player.id),
                    player.isBanned and "BANNED" or "Active",
                    player.hasVerifiedBadge and " ✓" or "",
                    string.sub(player.created, 1, 10)
                )
            else
                displayText = displayText .. string.format(
                    "[%d] %s (@%s) | %s\n",
                    i,
                    player.displayName,
                    player.name,
                    tostring(player.id)
                )
            end
        end
    end
    
    _G.AdminPanel.BlacklistDisplay:SetText(displayText)
end

-- Function to search blacklist
function searchBlacklist(query)
    updateBlacklistDisplay()
    if query and query ~= "" then
        _G.CROW:SendNotification("Searching for: " .. query, 2)
    else
        _G.CROW:SendNotification("Search cleared", 2)
    end
end

-- Function to add player to blacklist
function addPlayerToBlacklist(input)
    if not input or input == "" then
        _G.CROW:SendNotification("Please enter a UserID or Username", 3)
        return
    end
    
    task.spawn(function()
        local userId = tonumber(input)
        
        -- If input is not a number, try to get UserID from username
        if not userId then
            local success, result = pcall(function()
                local url = "https://users.roblox.com/v1/usernames/users"
                local postData = HttpService:JSONEncode({
                    usernames = {input}
                })
                local response = HttpService:PostAsync(url, postData, Enum.HttpContentType.ApplicationJson)
                local data = HttpService:JSONDecode(response)
                if data.data and data.data[1] then
                    return data.data[1].id
                end
                return nil
            end)
            
            if success and result then
                userId = result
            else
                _G.CROW:SendNotification("Failed to find user: " .. input, 3)
                return
            end
        end
        
        -- Check if already blacklisted
        for _, blacklistedId in ipairs(_G.BlacklistedPlayers) do
            if blacklistedId == userId then
                _G.CROW:SendNotification("User already blacklisted!", 3)
                return
            end
        end
        
        -- Add to blacklist (Note: This only adds locally)
        table.insert(_G.BlacklistedPlayers, userId)
        _G.CROW:SendNotification("Added UserID " .. userId .. " to blacklist", 3)
        
        -- Refresh display
        refreshBlacklistInfo()
        
        -- Check if the user is currently in the server
        for _, player in ipairs(Players:GetPlayers()) do
            if player.UserId == userId then
                _G.CROW:SendNotification("Kicking newly blacklisted player: " .. player.Name, 3)
                player:Kick("You have been blacklisted from using this script")
            end
        end
    end)
end

-- Function to remove player from blacklist
function removePlayerFromBlacklist(input)
    local userId = tonumber(input)
    if not userId then
        _G.CROW:SendNotification("Please enter a valid UserID", 3)
        return
    end
    
    local found = false
    for i, blacklistedId in ipairs(_G.BlacklistedPlayers) do
        if blacklistedId == userId then
            table.remove(_G.BlacklistedPlayers, i)
            found = true
            break
        end
    end
    
    if found then
        _G.CROW:SendNotification("Removed UserID " .. userId .. " from blacklist", 3)
        refreshBlacklistInfo()
    else
        _G.CROW:SendNotification("UserID not found in blacklist", 3)
    end
end

-- Function to update player list
function updatePlayerList()
    if not _G.AdminPanel.PlayerListDisplay then return end
    
    local currentPlayers = Players:GetPlayers()
    local playerInfo = library.flags["PlayerInfoLevel"] or "Basic"
    
    local displayText = "=== CURRENT PLAYERS (" .. #currentPlayers .. ") ===\n"
    
    for i, player in ipairs(currentPlayers) do
        local isAdmin = false
        for _, adminId in ipairs(_G.Admins) do
            if player.UserId == adminId then
                isAdmin = true
                break
            end
        end
        
        local isBlacklisted = false
        for _, blacklistedId in ipairs(_G.BlacklistedPlayers) do
            if player.UserId == blacklistedId then
                isBlacklisted = true
                break
            end
        end
        
        if playerInfo == "Basic" then
            displayText = displayText .. string.format(
                "[%d] %s%s%s\n",
                i,
                player.Name,
                isAdmin and " [ADMIN]" or "",
                isBlacklisted and " [BLACKLISTED]" or ""
            )
        elseif playerInfo == "Detailed" then
            displayText = displayText .. string.format(
                "[%d] %s (@%s) | ID: %s%s%s\n",
                i,
                player.DisplayName or player.Name,
                player.Name,
                tostring(player.UserId),
                isAdmin and " [ADMIN]" or "",
                isBlacklisted and " [BLACKLISTED]" or ""
            )
        else -- Advanced
            local character = player.Character
            local health = "N/A"
            local tool = "None"
            
            if character then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    health = math.floor(humanoid.Health) .. "/" .. math.floor(humanoid.MaxHealth)
                end
                
                local equippedTool = character:FindFirstChildOfClass("Tool")
                if equippedTool then
                    tool = equippedTool.Name
                end
            end
            
            displayText = displayText .. string.format(
                "[%d] %s (@%s)\n" ..
                "    ID: %s | HP: %s | Tool: %s%s%s\n",
                i,
                player.DisplayName or player.Name,
                player.Name,
                tostring(player.UserId),
                health,
                tool,
                isAdmin and " [ADMIN]" or "",
                isBlacklisted and " [BLACKLISTED]" or ""
            )
        end
    end
    
    _G.AdminPanel.PlayerListDisplay:SetText(displayText)
    
    -- Update player count
    if _G.AdminPanel.PlayerCountButton then
        _G.AdminPanel.PlayerCountButton:SetText("Players in server: " .. #currentPlayers)
    end
end

-- Function to kick player
function kickPlayer(input)
    local targetPlayer = nil
    local userId = tonumber(input)
    
    -- Find player by UserID or username
    for _, player in ipairs(Players:GetPlayers()) do
        if userId and player.UserId == userId then
            targetPlayer = player
            break
        elseif string.lower(player.Name) == string.lower(input) then
            targetPlayer = player
            break
        end
    end
    
    if targetPlayer then
        -- Check if trying to kick admin
        for _, adminId in ipairs(_G.Admins) do
            if targetPlayer.UserId == adminId then
                _G.CROW:SendNotification("Cannot kick admin: " .. targetPlayer.Name, 3)
                return
            end
        end
        
        targetPlayer:Kick("Kicked by admin")
        _G.CROW:SendNotification("Kicked player: " .. targetPlayer.Name, 3)
        task.wait(1)
        updatePlayerList()
    else
        _G.CROW:SendNotification("Player not found: " .. input, 3)
    end
end

-- Function to get detailed player info
function getDetailedPlayerInfo(input)
    local targetPlayer = nil
    local userId = tonumber(input)
    
    -- Find player by UserID or username
    for _, player in ipairs(Players:GetPlayers()) do
        if userId and player.UserId == userId then
            targetPlayer = player
            break
        elseif string.lower(player.Name) == string.lower(input) then
            targetPlayer = player
            break
        end
    end
    
    if targetPlayer then
        local info = string.format(
            "=== PLAYER INFO ===\n" ..
            "Name: %s\n" ..
            "Display: %s\n" ..
            "UserID: %s\n" ..
            "Account Age: %d days\n" ..
            "Team: %s\n",
            targetPlayer.Name,
            targetPlayer.DisplayName or targetPlayer.Name,
            tostring(targetPlayer.UserId),
            targetPlayer.AccountAge,
            targetPlayer.Team and targetPlayer.Team.Name or "None"
        )
        
        _G.CROW:SendNotification("Player info retrieved", 2)
        print(info) -- Output to console
    else
        _G.CROW:SendNotification("Player not found: " .. input, 3)
    end
end

-- Function to kick all non-admins
function kickAllNonAdmins()
    local kicked = 0
    for _, player in ipairs(Players:GetPlayers()) do
        local isAdmin = false
        for _, adminId in ipairs(_G.Admins) do
            if player.UserId == adminId then
                isAdmin = true
                break
            end
        end
        
        if not isAdmin then
            player:Kick("Server cleared by admin")
            kicked = kicked + 1
        end
    end
    
    _G.CROW:SendNotification("Kicked " .. kicked .. " non-admin players", 3)
    task.wait(2)
    updatePlayerList()
end

-- Function to announce to server
function announceToServer()
    -- This would need a custom announcement system or chat
    _G.CROW:SendNotification("Announcement feature not implemented", 3)
end

-- Function to export blacklist
function exportBlacklist()
    local exportData = "Blacklisted Players Export:\n"
    for i, player in ipairs(_G.AdminPanel.BlacklistCache) do
        exportData = exportData .. string.format(
            "%d. %s (@%s) - ID: %s\n",
            i,
            player.displayName,
            player.name,
            tostring(player.id)
        )
    end
    
    print(exportData) -- Output to console
    _G.CROW:SendNotification("Blacklist exported to console", 3)
end

-- Function to reload all sections
function reloadAllSections()
    _G.CROW:SendNotification("Reloading all sections...", 3)
    
    -- Reset section status (if available)
    if sectionsLoaded then
        for sectionName, _ in pairs(sectionsLoaded) do
            if sectionName ~= "Admin" then
                sectionsLoaded[sectionName] = false
            end
        end
    end
    
    -- Trigger reload
    task.spawn(function()
        if loadSection then
            loadSection("Player", {
                "https://raw.githubusercontent.com/wrdzy/CROWui/refs/heads/main/PlayerSec"
            })
            
            loadSection("Aimlock", {
                "https://raw.githubusercontent.com/wrdzy/CROWui/refs/heads/main/AimSec"
            })
            
            loadSection("ESP", {
                "https://raw.githubusercontent.com/wrdzy/CROWui/refs/heads/main/ESPsec"
            })
        end
    end)
end

-- Function to start auto refresh
function startAutoRefresh()
    task.spawn(function()
        while _G.AdminPanel.AutoRefresh do
            task.wait(30) -- Wait 30 seconds
            if _G.AdminPanel.AutoRefresh then
                refreshBlacklistInfo()
            end
        end
    end)
end

-- Function to start player monitoring
function startPlayerMonitoring()
    -- Update player list immediately
    updatePlayerList()
    
    -- Connect to player events
    Players.PlayerAdded:Connect(function(player)
        if _G.AdminPanel.MonitoringPlayers then
            _G.CROW:SendNotification("Player joined: " .. player.Name, 2)
            
            -- Check if blacklisted and auto-kick is enabled
            if library.flags["AutoKickBlacklisted"] then
                for _, blacklistedId in ipairs(_G.BlacklistedPlayers) do
                    if player.UserId == blacklistedId then
                        _G.CROW:SendNotification("Auto-kicking blacklisted player: " .. player.Name, 3)
                        player:Kick("You are blacklisted from using this script")
                        return
                    end
                end
            end
            
            task.wait(1)
            updatePlayerList()
        end
    end)
    
    Players.PlayerRemoving:Connect(function(player)
        if _G.AdminPanel.MonitoringPlayers then
            _G.CROW:SendNotification("Player left: " .. player.Name, 2)
            task.wait(1)
            updatePlayerList()
        end
    end)
end

-- Performance monitoring
task.spawn(function()
    local lastTime = tick()
    local frameCount = 0
    
    while task.wait() do
        frameCount = frameCount + 1
        local currentTime = tick()
        
        if currentTime - lastTime >= 1 then
            local fps = math.floor(frameCount / (currentTime - lastTime))
            
            if _G.AdminPanel.FPSButton then
                _G.AdminPanel.FPSButton:SetText("FPS: " .. fps)
            end
            
            frameCount = 0
            lastTime = currentTime
        end
    end
end)

-- Ping monitoring (simplified)
task.spawn(function()
    while task.wait(5) do
        local ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue()
        if _G.AdminPanel.PingButton then
            _G.AdminPanel.PingButton:SetText("Ping: " .. math.floor(ping) .. "ms")
        end
    end
end)

-- Initialize everything
refreshBlacklistInfo()

-- Admin Panel Cleanup
_G.AdminPanel.Cleanup = function()
    _G.AdminPanel.BlacklistCache = {}
    _G.AdminPanel.RefreshInProgress = false
    _G.AdminPanel.AutoRefresh = false
    _G.AdminPanel.MonitoringPlayers = false
    print("Admin Panel cleaned up")
end

print("Admin Panel loaded successfully!")
_G.CROW:SendNotification("Admin Panel loaded ✓", 2)
